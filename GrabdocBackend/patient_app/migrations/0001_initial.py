# Generated by Django 4.1.6 on 2023-05-16 16:21

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConsultantDiseaseTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_type', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'consultant_disease_table',
            },
        ),
        migrations.CreateModel(
            name='DoctorsMastertable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('experience', models.FloatField(blank=True, null=True)),
                ('address1', models.CharField(blank=True, max_length=300, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'doctors_master_table',
            },
        ),
        migrations.CreateModel(
            name='Mobile_Reg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=10)),
                ('device_id', models.CharField(max_length=100)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('otp', models.PositiveIntegerField(null=True)),
                ('number_of_attements', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='SpecalityMastertable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specality_name', models.CharField(blank=True, max_length=200, null=True)),
                ('specality_description', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'db_table': 'specality_master_table',
            },
        ),
        migrations.CreateModel(
            name='TimeSlottable',
            fields=[
                ('doctor_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('start_time', models.TimeField(verbose_name='Show start time')),
                ('duration', models.DurationField(verbose_name='Duration od time')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
            ],
            options={
                'db_table': 'doctors_time_slots_table',
            },
        ),
        migrations.CreateModel(
            name='PatientMasterTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patient_first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('patient_last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('gendar', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('username', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
